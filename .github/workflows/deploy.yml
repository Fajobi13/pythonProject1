name: Build, SAST, and Deploy Dockerized Flask App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python 3.9
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # Step 3: Install Python dependencies for SAST
    - name: Install Bandit (SAST)
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install bandit

    # Step 4: Run Bandit for Static Application Security Testing (SAST)
    - name: Run Bandit Security Analysis
      run: |
        source venv/bin/activate
        bandit -r app/ -f txt -o bandit-report.txt
        cat bandit-report.txt

    # Step 5: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 6: Log in to Docker Hub using credentials stored in GitHub Secrets
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 7: Get the version (tag or commit SHA) and save it using environment files
    - name: Get the version
      id: version
      run: |
        VERSION=$(git describe --tags --always || echo "latest")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Step 8: Build the Docker image with the dynamic version
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ env.VERSION }} .

    # Step 9: Push the Docker image to Docker Hub with the dynamic version
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 1: Deploy the Dockerized app on a remote server (via SSH)
    - name: Deploy to Remote Server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ env.VERSION }}
          docker stop flask-app || true
          docker rm flask-app || true
          docker run -d -p 80:4000 --name flask-app ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ env.VERSION }}
